@model FreelanceJobBoard.Presentation.Models.ViewModels.UserReviewsViewModel
@{
    ViewData["Title"] = "My Reviews";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<div class="d-flex flex-column flex-column-fluid">
    <!--begin::Toolbar-->
    <div id="kt_app_toolbar" class="app-toolbar py-3 py-lg-6">
        <div id="kt_app_toolbar_container" class="app-container container-xxl d-flex flex-stack">
            <div class="page-title d-flex flex-column justify-content-center flex-wrap me-3">
                <h1 class="page-heading d-flex text-dark fw-bold fs-3 flex-column justify-content-center my-0">
                    <span style="color: #ffc107; font-size: 2rem;" class="star"> ★ </span>
                    My Reviews
                </h1>
                <ul class="breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0 pt-1">
                    <li class="breadcrumb-item text-muted">
                        <a asp-controller="Home" asp-action="Index" class="text-muted text-hover-primary">Dashboard</a>
                    </li>
                    <li class="breadcrumb-item">
                        <span class="bullet bg-gray-400 w-5px h-2px"></span>
                    </li>
                    <li class="breadcrumb-item text-muted">My Reviews</li>
                </ul>
            </div>
            <div class="d-flex align-items-center gap-2 gap-lg-3">
                <a asp-action="Pending" class="btn btn-sm fw-bold btn-light-warning">
                    <i class="ki-duotone ki-clock fs-4">
                        <span class="path1"></span>
                        <span class="path2"></span>
                    </i>
                    Pending Reviews
                </a>
            </div>
        </div>
    </div>
    <!--end::Toolbar-->

    <!--begin::Content-->
    <div id="kt_app_content" class="app-content flex-column-fluid">
        <div id="kt_app_content_container" class="app-container container-xxl">
            
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="ki-duotone ki-check fs-2hx text-success me-4">
                        <span class="path1"></span>
                        <span class="path2"></span>
                    </i>
                    @TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="ki-duotone ki-cross fs-2hx text-danger me-4">
                        <span class="path1"></span>
                        <span class="path2"></span>
                    </i>
                    @TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Reviews Summary -->
            <div class="row mb-8">
                <div class="col-xl-4">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column justify-content-center text-center">
                            <div class="mb-5">
                                <div class="display-4 fw-bold text-primary mb-2">@Model.AverageRating.ToString("F1")</div>
                                <div class="rating-display mb-3">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star-display @(i <= Math.Round(Model.AverageRating) ? "filled" : "empty")" style="font-size: 1.5rem;">★</span>
                                    }
                                </div>
                                <div class="text-gray-600 fs-6">Average Rating</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-xl-4">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column justify-content-center text-center">
                            <div class="mb-5">
                                <div class="display-4 fw-bold text-info mb-2">@Model.TotalReviews</div>
                                <div class="text-gray-600 fs-6">Total Reviews</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-xl-4">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column justify-content-center text-center">
                            <div class="mb-5">
                                <div class="display-4 fw-bold text-success mb-2">
                                    @(Model.AverageRating >= 4 ? "Excellent" : 
                                      Model.AverageRating >= 3 ? "Good" : 
                                      Model.AverageRating >= 2 ? "Fair" : 
                                      Model.AverageRating >= 1 ? "Poor" : "No Rating")
                                </div>
                                <div class="text-gray-600 fs-6">Overall Performance</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reviews List -->
            <div class="card">
                <div class="card-header">
                    <div class="card-title">
                        <h3 class="fw-bold text-dark">Reviews Received (@Model.TotalReviews)</h3>
                    </div>
                    @if (Model.Reviews.Any())
                    {
                        <div class="card-toolbar">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-light-primary active" data-filter="all">All</button>
                                <button type="button" class="btn btn-sm btn-light-primary" data-filter="5">5 Stars</button>
                                <button type="button" class="btn btn-sm btn-light-primary" data-filter="4">4 Stars</button>
                                <button type="button" class="btn btn-sm btn-light-primary" data-filter="3">3 Stars</button>
                                <button type="button" class="btn btn-sm btn-light-primary" data-filter="2">2 Stars</button>
                                <button type="button" class="btn btn-sm btn-light-primary" data-filter="1">1 Star</button>
                            </div>
                        </div>
                    }
                </div>
                <div class="card-body">
                    @if (Model.Reviews.Any())
                    {
                        <div class="reviews-container">
                            @foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
                            {
                                <div class="review-item border rounded p-6 mb-6" data-rating="@review.Rating">
                                    <div class="d-flex align-items-start justify-content-between mb-4">
                                        <div class="d-flex align-items-center">
                                            <div class="symbol symbol-40px me-3">
                                                <div class="symbol-label bg-light-primary">
                                                    <i class="ki-duotone ki-user fs-2 text-primary">
                                                        <span class="path1"></span>
                                                        <span class="path2"></span>
                                                    </i>
                                                </div>
                                            </div>
                                            <div>
                                                <div class="fw-bold text-gray-800">@review.ReviewerName</div>
                                                <div class="text-gray-600 fs-7">@review.CreatedAt.ToString("MMM dd, yyyy")</div>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <div class="rating-display mb-1">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <span class="star-display @(i <= review.Rating ? "filled" : "empty")" style="font-size: 1.2rem;">★</span>
                                                }
                                            </div>
                                            <div class="fs-7 text-gray-600">@review.Rating/5</div>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-4">
                                        <p class="text-gray-700 mb-0">@review.Comment</p>
                                    </div>
                                    
                                    <div class="d-flex align-items-center justify-content-between">
                                        <div class="text-gray-600 fs-8">
                                            <i class="ki-duotone ki-briefcase fs-7 me-1">
                                                <span class="path1"></span>
                                                <span class="path2"></span>
                                            </i>
                                            Job ID: @review.JobId
                                        </div>
                                        <div class="text-end">
                                            @if (review.IsVisible)
                                            {
                                                <span class="badge badge-light-success">Public</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-light-warning">Private</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-10">
                            <div class="mb-5">
                                <span style="font-size: 4rem; color: #a1a5b7;">★</span>
                            </div>
                            <h3 class="text-gray-600 fw-bold mb-3">No Reviews Yet</h3>
                            <p class="text-gray-500 mb-5">You haven't received any reviews yet. Complete some jobs to start building your reputation!</p>
                            <a asp-controller="Jobs" asp-action="Index" class="btn btn-primary">
                                <i class="ki-duotone ki-search-list fs-2">
                                    <span class="path1"></span>
                                    <span class="path2"></span>
                                    <span class="path3"></span>
                                </i>
                                Browse Jobs
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('My Reviews page initialized');
            
            // Handle review filtering
            const filterButtons = document.querySelectorAll('[data-filter]');
            const reviewItems = document.querySelectorAll('.review-item');
            
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Update active button
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    const filter = this.getAttribute('data-filter');
                    
                    // Filter reviews
                    reviewItems.forEach(item => {
                        const rating = item.getAttribute('data-rating');
                        
                        if (filter === 'all' || rating === filter) {
                            item.style.display = 'block';
                            item.classList.add('fade-in');
                        } else {
                            item.style.display = 'none';
                            item.classList.remove('fade-in');
                        }
                    });
                    
                    // Show count of filtered results
                    const visibleItems = document.querySelectorAll('.review-item[style*="block"]').length;
                    console.log(`Filtered to ${visibleItems} reviews with ${filter === 'all' ? 'all ratings' : filter + ' stars'}`);
                });
            });
            
            // Add animation for review items
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-in');
                    }
                });
            }, observerOptions);
            
            reviewItems.forEach(item => {
                observer.observe(item);
            });
            
            console.log(`Initialized ${reviewItems.length} review items with animations`);
        });
    </script>
    
    <style>
        /* Star Rating Display Styles */
        .rating-display {
            display: inline-flex;
            gap: 2px;
        }
        
        .star-display {
            font-family: Arial, sans-serif;
            user-select: none;
            transition: all 0.2s ease;
        }
        
        .star-display.filled {
            color: #ffc107 !important;
            text-shadow: 0 0 5px rgba(255, 193, 7, 0.3);
        }
        
        .star-display.empty {
            color: #e4e6ef !important;
        }
        
        /* Review item animations */
        .review-item {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s ease;
        }
        
        .review-item.animate-in,
        .review-item.fade-in {
            opacity: 1;
            transform: translateY(0);
        }
        
        .review-item:hover {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }
        
        /* Filter buttons */
        .btn-group .btn.active {
            background-color: var(--kt-primary) !important;
            color: white !important;
            border-color: var(--kt-primary) !important;
        }
        
        /* Star hover effects */
        .star-display:hover {
            transform: scale(1.1);
        }
        
        /* Overall performance styling */
        .display-4 {
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Card hover effects */
        .card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
    </style>
}