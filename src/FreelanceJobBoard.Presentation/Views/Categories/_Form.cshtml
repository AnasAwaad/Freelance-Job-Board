@model CategoryFormViewModel

<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">
                    @(Model?.Id > 0 ? "Update Category" : "Create Category")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form 
                id="ModalForm"
                asp-action="@(Model?.Id > 0 ?"UpdateModal":"CreateModal")"
                method="post" 
                class="form">
                <div class="modal-body">
                    @if (Model?.Id > 0)
                    {
                        <input type="hidden" asp-for="Id" />
                    }
                    
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    
                    <div class="mb-3">
                        <label asp-for="Name" class="form-label required">Category Name</label>
                        <input asp-for="Name" class="form-control form-control-solid" placeholder="Enter category name" required />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="Description" class="form-label">Description</label>
                        <textarea asp-for="Description" class="form-control" rows="3" placeholder="Enter category description (optional)"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    
                    <div class="form-check">
                        <input asp-for="IsActive" class="form-check-input" type="checkbox" />
                        <label asp-for="IsActive" class="form-check-label">
                            Active
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        @(Model?.Id > 0 ? "Update" : "Create") Category
                    </button>
                </div>
                @Html.AntiForgeryToken()
            </form>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // Initialize the modal properly
        const modal = new bootstrap.Modal(document.getElementById('categoryModal'));
        
        // Show the modal now that it's properly initialized
        modal.show();
        
        // Remove any existing form handlers to prevent conflicts
        $('#ModalForm').off('submit.categoryForm');
        
        // Handle modal form submission with improved duplicate prevention
        $('#ModalForm').on('submit.categoryForm', function(e) {
            e.preventDefault();
            
            // Prevent multiple submissions
            const submitBtn = $('#submitBtn');
            if (submitBtn.prop('disabled')) {
                return false;
            }
            
            // Clear any existing validation errors
            $('.text-danger').text('');
            $('.is-invalid').removeClass('is-invalid');
            
            const form = $(this);
            const formData = new FormData(this);
            
            // Disable submit button immediately to prevent double submission
            const originalText = submitBtn.text();
            submitBtn.prop('disabled', true).text('Saving...');
            
            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response && response.includes('<tr>')) {
                        // Successfully created/updated - response contains the new row
                        if ($('#ModalForm input[name="Id"]').val()) {
                            // Update existing row
                            const id = $('#ModalForm input[name="Id"]').val();
                            $(`tr:has([data-url*="${id}"])`).replaceWith(response);
                        } else {
                            // Add new row
                            if ($('.js-tbody tr').length === 0 || $('.js-tbody tr').first().find('td[colspan]').length > 0) {
                                // First category or empty state - reload to handle empty state properly
                                location.reload();
                                return;
                            } else {
                                $('.js-tbody').prepend(response);
                            }
                        }
                        
                        // Simply hide the modal without showing any confirmation message
                        modal.hide();
                    } else {
                        // Form validation errors - replace modal content
                        const modalContent = $('#categoryModal .modal-content');
                        const newContent = $(response);
                        modalContent.html(newContent.find('.modal-content').html());
                        
                        // Re-initialize validation
                        if (typeof $.validator !== 'undefined' && $.validator.unobtrusive) {
                            $.validator.unobtrusive.parse('#ModalForm');
                        }
                        
                        // Re-enable submit button for new content
                        $('#submitBtn').prop('disabled', false);
                    }
                },
                error: function(xhr) {
                    console.error('Form submission failed:', xhr);
                    // Show error message only for actual errors
                    if (typeof toastr !== 'undefined') {
                        toastr.error('An error occurred while saving the category. Please try again.');
                    } else {
                        alert('An error occurred while saving the category. Please try again.');
                    }
                    // Re-enable submit button on error
                    submitBtn.prop('disabled', false).text(originalText);
                }
            });
            
            return false; // Prevent any other form submission
        });
        
        // Clean up when modal is hidden
        $('#categoryModal').on('hidden.bs.modal', function () {
            // Remove the modal from DOM to prevent duplicates
            $(this).remove();
        });
    });
</script>
