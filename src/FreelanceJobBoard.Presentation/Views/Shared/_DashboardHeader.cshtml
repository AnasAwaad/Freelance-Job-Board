@using System.Security.Claims

<div id="kt_app_header" class="app-header" data-kt-sticky="true" data-kt-sticky-activate="{default: true, lg: true}" data-kt-sticky-name="app-header-minimize" data-kt-sticky-offset="{default: '200px', lg: '0'}" data-kt-sticky-animation="false">
	<!--begin::Header container-->
	<div class="app-container container-fluid d-flex align-items-stretch justify-content-between" id="kt_app_header_container">
		<!--begin::Sidebar mobile toggle-->
		<div class="d-flex align-items-center d-lg-none ms-n3 me-1 me-md-2" title="Show sidebar menu">
			<div class="btn btn-icon btn-active-color-primary w-35px h-35px" id="kt_app_sidebar_mobile_toggle">
				<i class="ki-duotone ki-abstract-14 fs-2 fs-md-1">
					<span class="path1"></span>
					<span class="path2"></span>
				</i>
			</div>
		</div>
		<!--end::Sidebar mobile toggle-->
		<!--begin::Mobile logo-->
		<div class="d-flex align-items-center flex-grow-1 flex-lg-grow-0">
			<a asp-controller="Home" asp-action="Index" class="d-lg-none">
				<img alt="Logo" src="~/images/default-small.svg" class="h-30px" />
			</a>
		</div>
		<!--end::Mobile logo-->
		<!--begin::Header wrapper-->
		<div class="d-flex align-items-stretch justify-content-end flex-lg-grow-1" id="kt_app_header_wrapper">

			<!--end::Menu wrapper-->
			<!--begin::Navbar-->
			<div class="app-navbar flex-shrink-0">
				<!--begin::Notifications-->
				<div class="app-navbar-item ms-1 ms-md-4">
					<!--begin::Menu- wrapper-->
					<div class="btn btn-icon btn-custom btn-icon-muted btn-active-light btn-active-color-primary w-35px h-35px" data-kt-menu-trigger="{default: 'click', lg: 'hover'}" data-kt-menu-attach="parent" data-kt-menu-placement="bottom-end" id="kt_menu_item_wow">
						<i class="ki-duotone ki-notification-status fs-2">
							<span class="path1"></span>
							<span class="path2"></span>
							<span class="path3"></span>
							<span class="path4"></span>
						</i>
					</div>
					<!--begin::Menu-->
					<div class="menu menu-sub menu-sub-dropdown menu-column w-350px w-lg-375px" data-kt-menu="true" id="kt_menu_notifications">
						<!--begin::Heading-->
						<div class="d-flex flex-column bgi-no-repeat rounded-top" style="background-image:url('/images/menu-header-bg.jpg')">
							<!--begin::Title-->
							<h3 class="text-white fw-semibold px-9 mt-10 mb-6">
								Notifications
								<span class="fs-8 opacity-75 ps-3" id="notification-count-display">Loading...</span>
							</h3>
							<!--end::Title-->
							<!--begin::Tabs-->
							<ul class="nav nav-line-tabs nav-line-tabs-2x nav-stretch fw-semibold px-9">
								<li class="nav-item">
									<a class="nav-link text-white opacity-75 opacity-state-100 pb-4" data-bs-toggle="tab" href="#kt_topbar_notifications_1">Alerts</a>
								</li>
							</ul>
							<!--end::Tabs-->
						</div>
						<!--end::Heading-->
						<!--begin::Tab content-->
						<div class="tab-content">
							<!--begin::Tab panel-->
							<div class="tab-pane fade show active" id="kt_topbar_notifications_1" role="tabpanel">
								<!--begin::Items-->
								<div class="scroll-y mh-325px my-5 px-8" id="Notifications">
									<div class="text-center py-5">
										<div class="spinner-border text-primary" role="status">
											<span class="visually-hidden">Loading...</span>
										</div>
										<div class="mt-2 text-muted">Loading notifications...</div>
									</div>
								</div>
								<!--end::Items-->
								<!--begin::View more-->
								<div class="py-3 text-center border-top">
									<a asp-controller="Notifications" asp-action="Index" class="btn btn-color-gray-600 btn-active-color-primary">
										View All
										<i class="ki-duotone ki-arrow-right fs-5">
											<span class="path1"></span>
											<span class="path2"></span>
										</i>
									</a>
								</div>
								<!--end::View more-->
							</div>
							<!--end::Tab panel-->
							
						</div>
						<!--end::Tab content-->
					</div>
					<!--end::Menu-->
					<!--end::Menu wrapper-->
				</div>
				<!--begin::User menu-->
				<div class="app-navbar-item ms-auto ms-md-4" id="kt_header_user_menu_toggle">
					<!--begin::Menu wrapper-->
					<div class="cursor-pointer symbol symbol-35px" data-kt-menu-trigger="{default: 'click', lg: 'hover'}" data-kt-menu-attach="parent" data-kt-menu-placement="bottom-end">
						@{
							var profileImageUrl = User.FindFirst("ProfileImageUrl")?.Value;
							var defaultAvatar = "~/images/avatar.jpg";
						}
						<img src="@(!string.IsNullOrEmpty(profileImageUrl) ? profileImageUrl : defaultAvatar)" class="rounded-3" alt="user" />
					</div>
					<!--begin::User account menu-->
					<div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-800 menu-state-bg menu-state-color fw-semibold py-4 fs-6 w-275px" data-kt-menu="true">
						<!--begin::Menu item-->
						<div class="menu-item px-3">
							<div class="menu-content d-flex align-items-center px-3">
								<!--begin::Avatar-->
								<div class="symbol symbol-50px me-5">
									<img alt="Profile" src="@(!string.IsNullOrEmpty(profileImageUrl) ? profileImageUrl : defaultAvatar)" />
								</div>
								<!--end::Avatar-->
								<!--begin::Username-->
								<div class="d-flex flex-column">
									<div class="fw-bold d-flex align-items-center fs-5">
										@(User.FindFirst(ClaimTypes.Name)?.Value ?? "User")
										@{
											var userRole = User.FindFirst(ClaimTypes.Role)?.Value;
											var badgeClass = userRole switch
											{
												"Admin" => "badge-light-danger",
												"Client" => "badge-light-info", 
												"Freelancer" => "badge-light-success",
												_ => "badge-light-secondary"
											};
										}
										<span class="badge @badgeClass fw-bold fs-8 px-2 py-1 ms-2">@(userRole ?? "User")</span>
									</div>
									<a href="#" class="fw-semibold text-muted text-hover-primary fs-7">@(User.FindFirst(ClaimTypes.Email)?.Value ?? "")</a>
								</div>
								<!--end::Username-->
							</div>
						</div>
						<!--end::Menu item-->
						<!--begin::Menu separator-->
						<div class="separator my-2"></div>
						<!--end::Menu separator-->
						<!--begin::Menu item-->
						<div class="menu-item px-5">
							<a asp-controller="Profile" asp-action="Index" class="menu-link px-5">My Profile</a>
						</div>
						<!--end::Menu item-->
						<!--begin::Menu separator-->
						<div class="separator my-2"></div>
						<!--end::Menu separator-->
						<!--begin::Menu item-->
						<div class="menu-item px-5" data-kt-menu-trigger="{default: 'click', lg: 'hover'}" data-kt-menu-placement="left-start" data-kt-menu-offset="-15px, 0">
							<a href="#" class="menu-link px-5">
								<span class="menu-title position-relative">
									Mode
									<span class="ms-5 position-absolute translate-middle-y top-50 end-0">
										<i class="ki-duotone ki-night-day theme-light-show fs-2">
											<span class="path1"></span>
											<span class="path2"></span>
											<span class="path3"></span>
											<span class="path4"></span>
											<span class="path5"></span>
											<span class="path6"></span>
											<span class="path7"></span>
											<span class="path8"></span>
											<span class="path9"></span>
											<span class="path10"></span>
										</i>
										<i class="ki-duotone ki-moon theme-dark-show fs-2">
											<span class="path1"></span>
											<span class="path2"></span>
										</i>
									</span>
								</span>
							</a>
							<!--begin::Menu-->
							<div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-title-gray-700 menu-icon-gray-500 menu-active-bg menu-state-color fw-semibold py-4 fs-base w-150px" data-kt-menu="true" data-kt-element="theme-mode-menu">
								<!--begin::Menu item-->
								<div class="menu-item px-3 my-0">
									<a href="#" class="menu-link px-3 py-2" data-kt-element="mode" data-kt-value="light">
										<span class="menu-icon" data-kt-element="icon">
											<i class="ki-duotone ki-night-day fs-2">
												<span class="path1"></span>
												<span class="path2"></span>
												<span class="path3"></span>
												<span class="path4"></span>
												<span class="path5"></span>
												<span class="path6"></span>
												<span class="path7"></span>
												<span class="path8"></span>
												<span class="path9"></span>
												<span class="path10"></span>
											</i>
										</span>
										<span class="menu-title">Light</span>
									</a>
								</div>
								<!--end::Menu item-->
								<!--begin::Menu item-->
								<div class="menu-item px-3 my-0">
									<a href="#" class="menu-link px-3 py-2" data-kt-element="mode" data-kt-value="dark">
										<span class="menu-icon" data-kt-element="icon">
											<i class="ki-duotone ki-moon fs-2">
												<span class="path1"></span>
												<span class="path2"></span>
											</i>
										</span>
										<span class="menu-title">Dark</span>
									</a>
								</div>
								<!--end::Menu item-->
								<!--begin::Menu item-->
								<div class="menu-item px-3 my-0">
									<a href="#" class="menu-link px-3 py-2" data-kt-element="mode" data-kt-value="system">
										<span class="menu-icon" data-kt-element="icon">
											<i class="ki-duotone ki-screen fs-2">
												<span class="path1"></span>
												<span class="path2"></span>
												<span class="path3"></span>
												<span class="path4"></span>
											</i>
										</span>
										<span class="menu-title">System</span>
									</a>
								</div>
								<!--end::Menu item-->
							</div>
							<!--end::Menu-->
						</div>
						<!--end::Menu item-->
						<!--begin::Menu item-->
						<div class="menu-item px-5 my-1">
							<a asp-controller="Profile" asp-action="Security" class="menu-link px-5">Account Settings</a>
						</div>
						<!--end::Menu item-->
						<!--begin::Menu item-->
						<div class="menu-item px-5">
							<form asp-controller="Auth" asp-action="Logout" method="post" class="d-inline">
								@Html.AntiForgeryToken()
								<button type="submit" class="menu-link px-5 bg-transparent border-0 w-100 text-start">Sign Out</button>
							</form>
						</div>
						<!--end::Menu item-->
					</div>
					<!--end::User account menu-->
					<!--end::Menu wrapper-->
				</div>
				<!--end::User menu-->
				<!--begin::Header menu toggle-->
				<div class="app-navbar-item d-lg-none ms-2 me-n2" title="Show header menu">
					<div class="btn btn-flex btn-icon btn-active-color-primary w-30px h-30px" id="kt_app_header_menu_toggle">
						<i class="ki-duotone ki-element-4 fs-1">
							<span class="path1"></span>
							<span class="path2"></span>
						</i>
					</div>
				</div>
				<!--end::Header menu toggle-->
				<!--begin::Aside toggle-->
				<!--end::Header menu toggle-->
			</div>
			<!--end::Navbar-->
		</div>
		<!--end::Header wrapper-->
	</div>
	<!--end::Header container-->
</div>

<!-- Add antiforgery token for AJAX requests -->
@Html.AntiForgeryToken()

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Load notifications when the notification menu is opened
    const notificationToggle = document.getElementById('kt_menu_item_wow');
    const notificationsContainer = document.getElementById('Notifications');
    const notificationCountDisplay = document.getElementById('notification-count-display');
    let notificationsLoaded = false;

    if (notificationToggle) {
        notificationToggle.addEventListener('click', function() {
            if (!notificationsLoaded) {
                loadNotifications();
                notificationsLoaded = true;
            }
        });
    }

    // Load notification count on page load
    loadNotificationCount();

    function loadNotifications() {
        fetch('/Notifications/GetDashboardNotifications')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayNotifications(data.notifications, data.unreadCount, data.totalCount);
                } else {
                    showNotificationError();
                }
            })
            .catch(error => {
                console.error('Error loading notifications:', error);
                showNotificationError();
            });
    }

    function loadNotificationCount() {
        fetch('/Notifications/GetUnreadCount')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateNotificationCount(data.count);
                }
            })
            .catch(error => {
                console.error('Error loading notification count:', error);
                if (notificationCountDisplay) {
                    notificationCountDisplay.textContent = '0 notifications';
                }
            });
    }

    function displayNotifications(notifications, unreadCount, totalCount) {
        if (!notificationsContainer) return;

        if (notifications.length === 0) {
            notificationsContainer.innerHTML = `
                <div class="text-center py-5">
                    <i class="ki-duotone ki-notification-bing fs-3x text-muted">
                        <span class="path1"></span>
                        <span class="path2"></span>
                        <span class="path3"></span>
                    </i>
                    <div class="mt-3 text-muted">No notifications yet</div>
                </div>
            `;
            return;
        }

        let html = '';
        notifications.forEach(notification => {
            const timeAgo = getTimeAgo(new Date(notification.createdOn));
            const iconClass = getNotificationIcon(notification.type);
            const colorClass = notification.isRead ? 'secondary' : 'primary';
            
            html += `
                <div class="d-flex flex-stack py-4 ${!notification.isRead ? 'bg-light-primary' : ''}">
                    <div class="d-flex align-items-center">
                        <div class="symbol symbol-35px me-4">
                            <span class="symbol-label bg-light-${colorClass}">
                                <i class="ki-duotone ${iconClass} fs-2 text-${colorClass}">
                                    <span class="path1"></span>
                                    <span class="path2"></span>
                                    <span class="path3"></span>
                                </i>
                            </span>
                        </div>
                        <div class="mb-0 me-2">
                            <div class="fs-6 text-gray-800 fw-bold mb-1">${escapeHtml(notification.title)}</div>
                            <div class="text-gray-600 fs-7 mb-1">${escapeHtml(truncateMessage(notification.message, 80))}</div>
                            <div class="text-gray-500 fs-8">${timeAgo}</div>
                        </div>
                    </div>
                    ${!notification.isRead ? `
                    <div class="ms-2">
                        <button type="button" class="btn btn-sm btn-light-primary" onclick="markAsRead(${notification.id})">
                            <i class="ki-duotone ki-check fs-4">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                        </button>
                    </div>
                    ` : ''}
                </div>
            `;
        });

        notificationsContainer.innerHTML = html;
        updateNotificationCount(unreadCount, totalCount);
    }

    function showNotificationError() {
        if (notificationsContainer) {
            notificationsContainer.innerHTML = `
                <div class="text-center py-5">
                    <i class="ki-duotone ki-cross-circle fs-3x text-danger">
                        <span class="path1"></span>
                        <span class="path2"></span>
                    </i>
                    <div class="mt-3 text-muted">Failed to load notifications</div>
                </div>
            `;
        }
    }

    function updateNotificationCount(unreadCount, totalCount = null) {
        if (notificationCountDisplay) {
            if (totalCount !== null) {
                notificationCountDisplay.textContent = `${totalCount} notification${totalCount !== 1 ? 's' : ''}`;
            } else {
                notificationCountDisplay.textContent = `${unreadCount} unread`;
            }
        }
        
        // Update sidebar notification badge if it exists
        const sidebarBadge = document.getElementById('sidebar-notification-count');
        if (sidebarBadge && unreadCount > 0) {
            sidebarBadge.textContent = unreadCount;
            sidebarBadge.style.display = 'inline';
        } else if (sidebarBadge) {
            sidebarBadge.style.display = 'none';
        }
    }

    function getNotificationIcon(type) {
        switch (type) {
            case 'proposal_received': return 'ki-message-text-2';
            case 'proposal_accepted': return 'ki-check-circle';
            case 'proposal_rejected': return 'ki-cross-circle';
            case 'contract_created': return 'ki-document';
            case 'contract_status_changed': return 'ki-notification-bing';
            case 'job_approved': return 'ki-check';
            case 'job_rejected': return 'ki-cross';
            case 'review_received': return 'ki-star';
            default: return 'ki-notification-bing';
        }
    }

    function getTimeAgo(date) {
        const now = new Date();
        const diff = now - date;
        const seconds = Math.floor(diff / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
        if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
        if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
        return 'Just now';
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function truncateMessage(message, maxLength) {
        if (message.length <= maxLength) return message;
        return message.substring(0, maxLength) + '...';
    }

    // Make markAsRead function globally accessible
    window.markAsRead = function(notificationId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        
        fetch('/Notifications/MarkAsRead', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `id=${notificationId}&__RequestVerificationToken=${encodeURIComponent(token || '')}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Reload notifications to reflect the change
                loadNotifications();
                updateNotificationCount(data.unreadCount);
            }
        })
        .catch(error => {
            console.error('Error marking notification as read:', error);
        });
    };
});
</script>

